@page "/developers/create"
@using BlazorCrud.Services
@inject IDeveloperService DeveloperService
@inject NavigationManager Navigation

<h3>Create Developer</h3>

<EditForm Model="NewDeveloper" OnValidSubmit="HandleValidSubmit" FormName="createDeveloper">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" @bind-Value="NewDeveloper.FirstName" class="form-control"/>
        <ValidationMessage For="() => NewDeveloper.FirstName"/>
    </div>

    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" @bind-Value="NewDeveloper.LastName" class="form-control"/>
        <ValidationMessage For="() => NewDeveloper.LastName"/>
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="NewDeveloper.Email" class="form-control"/>
        <ValidationMessage For="() => NewDeveloper.Email"/>
    </div>

    <div class="form-group">
        <label for="age">Age</label>
        <InputNumber id="age" @bind-Value="NewDeveloper.Age" class="form-control"/>
        <ValidationMessage For="() => NewDeveloper.Age"/>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>
<div>
    <NavLink Match="NavLinkMatch.All" href="/developers/index">Cancel</NavLink>

</div>

@code {
    [SupplyParameterFromForm]
    [Parameter]
    public Developer NewDeveloper { get; set; }=new Developer();

    private async Task HandleValidSubmit()
    {
        var success = DeveloperService.Create(NewDeveloper);
        if (success)
        {
            Navigation.NavigateTo("/developers/index");
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/developers/index");
    }

}